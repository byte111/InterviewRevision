// Time: O(n2) Space: O(n2)
// https://leetcode.com/problems/longest-palindromic-subsequence/
public int longestPalindromeSubseq(String s) {
        int dp[][] = new int[s.length()+1][s.length()+1];
        for(int i=s.length()-1;i>=0;i--) {
            for(int j=s.length()-1;j>=0;j--) {
                if (s.charAt(i) == s.charAt(s.length()-j-1)){
                    dp[i][j] = dp[i+1][j+1]+1;
                } else {
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j+1]);
                }
            }
        }
        return dp[0][0];
    }
