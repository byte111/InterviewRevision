class Solution {

/*
Time: O(n2)
Space: O(n2)
https://leetcode.com/problems/01-matrix
*/
    public int[][] updateMatrix(int[][] mat) {
        return bfs(mat);
    }

    int [][] bfs(int mat[][]){
        
        Queue<int[]> q = new LinkedList<>();
        int rows = mat.length;
        int cols = mat[0].length;
        int dist[][] = new int[rows][cols];

        for(int i=0;i<mat.length;i++) {
            for(int j=0;j<mat[i].length;j++){
                if(mat[i][j] == 0) {
                    q.offer(new int[]{i,j});   
                    dist[i][j] = 0;         
                } else {
                    dist[i][j] = Integer.MAX_VALUE;
                }
            }
        }

        int dir[][] = {{-1,0},{0,1},{1,0},{0,-1}};

        while(!q.isEmpty()) {
            int curr[] = q.poll();
            
            for(int i =0 ;i <dir.length;i++){
                int r = curr[0] + dir[i][0];
                int c = curr[1] + dir[i][1];
                
                if(r >= 0 && r<rows && c >=0 && c <cols){

                    if(dist[r][c] > dist[curr[0]][curr[1]] + 1) {
                    
                        dist[r][c] = dist[curr[0]][curr[1]] + 1;
                        q.offer(new int[]{r,c});
                    }
                }
            }            
        }

        return dist;

    }
}
