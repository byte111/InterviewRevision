/*
Time: O(n3)
Space: O(n)
139. Word Break
https://leetcode.com/problems/word-break/description/

*/
class Solution {
    // solution A
    public boolean wordBreak1(String s, List<String> wordDict) {
        boolean dp[] = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i=1;i<=s.length();i++){
            for(int j=0;j<i;j++){
                if(dp[j] == true && wordDict.contains(s.substring(j,i))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }

   // solution B
    public static boolean wordBreak(String s, List<String> wordDict) {
        boolean dp[] = new boolean[s.length() + 1];
        dp[s.length()] = true;
        for(int i=s.length()-1;i>=0;i--){
            for(int j=0;j<wordDict.size();j++){
                if (i+wordDict.get(j).length() <= s.length() && s.substring(i, i+wordDict.get(j).length()).equals(wordDict.get(j))){
                    dp[i] = dp[i + wordDict.get(j).length()];
                    if (dp[i] == true)
                        break;
                }
            }
        }
        return dp[0];
    }
}
