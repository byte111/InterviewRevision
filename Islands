class Solution {

    /*
    Time: O(v + e)
    Space: O(v+e)
    https://leetcode.com/problems/number-of-islands/
    Number of islands
    */
    public int numIslands(char[][] grid) {
        int ans = 0;
        int maxR = grid.length;
        int maxC = grid[0].length;
        boolean visited[][] = new boolean[maxR][maxC];

        for(int i=0;i<maxR;i++){
            for(int j=0;j<maxC;j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    dfs(grid, visited, i, j, maxR, maxC);
                    ans++;
                }                
            }
        }

        return ans;
    }

    public void dfs(char grid[][], boolean visited[][], int r, int c, int maxR, int maxC){
        if(r == maxR || c == maxC || r < 0 || c < 0 || visited[r][c] || 
        grid[r][c] != '1'){
            return;
        }

        visited[r][c] = true;

        dfs(grid, visited, r, c+1, maxR, maxC);
        dfs(grid, visited, r+1, c, maxR, maxC);
        dfs(grid, visited, r, c-1, maxR, maxC);
        dfs(grid, visited, r-1, c, maxR, maxC);

    }
}
