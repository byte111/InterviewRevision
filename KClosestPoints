import java.util.PriorityQueue;

public class KClosestPoints {
    public static void main(String[] args) {
        int points[][] = new int[3][2];
        points[0][0]  = 3;
        points[0][1]  = 3;
        points[1][0]  = 5;
        points[1][1]  = -1;
        points[2][0]  = -2;
        points[2][1]  = 4;

        int k = 2;
        int ans[][] = kClosest(points, k);
        for(int curr[] : ans){
            System.out.println(curr[0] + "," + curr[1]);
        }
    }

    public static int[][] kClosest(int[][] points, int k) {
        int ans[][] = new int[k][2];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> {
            double distA = Math.pow(a[0], 2) + Math.pow(a[1],2);
            double distB = Math.pow(b[0], 2) + Math.pow(b[1],2);

            if(distA > distB)
                return 1;
            else if (distB > distA)
                    return -1;
            else
                return 0;
        });

        for(int point[] : points){
            pq.add(point);
        }

        for(int i=1;i<=k;i++){
            int curr[] = pq.poll();
            ans[i-1] = curr;
        }

        return ans;
    }

}
