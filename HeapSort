/*
 Time: build max heap + n times heapify op.. => O(n) + n log n => O(n log n)
 Space: in-place => constant 

*/

public class HeapSort {

    public static void main(String[] args) {
        int arr[] = { 3,19,1,14,8,7};

        HeapSort hs = new HeapSort();
        hs.sort(arr);

        System.out.println("Sorted array is");
        printArray(arr);
    }
    // Function to print an array
    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    public void sort(int arr[]) {
        int n = arr.length;
        for(int i= n/2 -1;i>=0;i--){
            heapify(arr, i, n);
        }

        for (int i= n-1;i>=0;i--){
            swap(arr, 0, i);
            heapify(arr, 0, i);
        }
    }


    public void heapify(int arr[],int curr, int max) {
        while(curr<max){
            int index = curr;
            int l = 2*curr +1;
            int r = l+1;

            if (l<max && arr[l] < arr[index]){
                index = l;
            }

            if(r<max && arr[r]<arr[index]){
                index = r;
            }

            if(index == curr){
                return;
            }

            swap(arr, index, curr);
            curr = index;
        }
    }

    private void swap(int arr[], int a, int b){
        int t = arr[a];
        arr[a] = arr[b];
        arr[b] = t;
    }
}
